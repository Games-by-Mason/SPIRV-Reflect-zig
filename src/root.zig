const std = @import("std");

pub const Error = error{
    // Errors added by the Zig wrapper
    OutOfBounds,

    // Built in errors
    NotReady,
    ParseFailed,
    AllocFailed,
    RangeExceeded,
    NullPointer,
    InternalError,
    CountMismatch,
    ElementNotFound,
    SpirvInvalidCodeSize,
    SpirvInvalidMagicNumber,
    SpirvUnexpectedEof,
    SpirvInvalidIdReference,
    SpirvSetNumberOverflow,
    SpirvInvalidStorageClass,
    SpirvRecursion,
    SpirvInvalidInstruction,
    SpirvUnexpectedBlockData,
    SpirvInvalidBlockMemberReference,
    SpirvInvalidEntryPoint,
    SpirvInvalidExecutionMode,
    SpirvMaxRecursiveExceeded,
    Unknown,
};

fn spvrErr(int: c_uint) Error!void {
    return switch (int) {
        0 => {},
        1 => error.NotReady,
        2 => error.ParseFailed,
        3 => error.AllocFailed,
        4 => error.RangeExceeded,
        5 => error.NullPointer,
        6 => error.InternalError,
        7 => error.CountMismatch,
        8 => error.ElementNotFound,
        9 => error.SpirvInvalidCodeSize,
        10 => error.SpirvInvalidMagicNumber,
        11 => error.SpirvUnexpectedEof,
        12 => error.SpirvInvalidIdReference,
        13 => error.SpirvSetNumberOverflow,
        14 => error.SpirvInvalidStorageClass,
        15 => error.SpirvRecursion,
        16 => error.SpirvInvalidInstruction,
        17 => error.SpirvUnexpectedBlockData,
        18 => error.SpirvInvalidBlockMemberReference,
        19 => error.SpirvInvalidEntryPoint,
        20 => error.SpirvInvalidExecutionMode,
        21 => error.SpirvMaxRecursiveExceeded,
        else => return error.Unknown,
    };
}

pub const ShaderModule = extern struct {
    generator: c_uint,
    entry_point_name: ?[*:0]const u8,
    entry_point_id: u32,
    entry_point_count: u32,
    entry_points: ?[*]EntryPoint,
    source_language: SourceLanguage,
    source_language_version: u32,
    source_file: ?[*:0]const u8,
    source_source: ?[*:0]const u8,
    capability_count: u32,
    capabilities: ?[*]Capability,
    spirv_execution_model: ExecutionModel,
    shader_stage: ShaderStageFlags,
    descriptor_binding_count: u32,
    descriptor_bindings: ?[*]DescriptorBinding,
    descriptor_set_count: u32,
    descriptor_sets: [64]DescriptorSet,
    input_variable_count: u32,
    input_variables: ?[*]*InterfaceVariable,
    output_variable_count: u32,
    output_variables: ?[*]*InterfaceVariable,
    interface_variable_count: u32,
    interface_variables: ?[*]InterfaceVariable,
    push_constant_block_count: u32,
    push_constant_blocks: ?[*]BlockVariable,
    spec_constant_count: u32,
    spec_constants: ?[*]SpecializationConstant,
    _internal: ?*anyopaque,

    pub fn init(spv: []const u32) Error!@This() {
        var result: @This() = undefined;
        try spvrErr(spvReflectGetShaderModule(
            spv.len * @sizeOf(u32),
            spv.ptr,
            @ptrCast(&result),
        ));
        return result;
    }

    pub fn deinit(self: *@This()) void {
        spvReflectDestroyShaderModule(@ptrCast(self));
        self.* = undefined;
    }
};

pub const DescriptorBinding = extern struct {
    spirv_id: u32,
    name: ?[*:0]const u8,
    binding: u32,
    input_attachment_index: u32,
    set: u32,
    descriptor_type: DescriptorType,
    resource_type: ResourceType,
    image: ImageTraits,
    block: BlockVariable,
    array: BindingArrayTraits,
    count: u32,
    accessed: u32,
    uav_counter_id: u32,
    uav_counter_binding: ?*DescriptorBinding,
    byte_address_buffer_offset_count: u32,
    byte_address_buffer_offsets: ?[*]u32,
    type_description: ?*TypeDescription,
    word_offset: extern struct {
        binding: u32,
        set: u32,
    },
    decoration_flags: DecorationFlags,
    user_type: UserType,
};

pub const EntryPoint = extern struct {
    pub const LocalSize = extern struct {
        x: u32,
        y: u32,
        z: u32,
    };

    name: ?[*:0]const u8,
    id: u32,
    spirv_execution_model: ExecutionModel,
    shader_stage: ShaderStageFlags,
    input_variable_count: u32,
    input_variables: ?[*]*InterfaceVariable,
    output_variable_count: u32,
    output_variables: ?[*]*InterfaceVariable,
    interface_variable_count: u32,
    interface_variables: ?[*]InterfaceVariable,
    descriptor_set_count: u32,
    descriptor_sets: ?[*]DescriptorSet,
    used_uniform_count: u32,
    used_uniforms: ?[*]u32,
    used_push_constant_count: u32,
    used_push_constants: ?[*]u32,
    execution_mode_count: u32,
    execution_modes: ?[*]ExecutionMode,
    local_size: LocalSize,
    invocations: u32,
    output_vertices: u32,
};

pub const SourceLanguage = enum(c_uint) {
    unknown = 0,
    essl = 1,
    glsl = 2,
    open_cl_c = 3,
    open_cl_cpp = 4,
    hlsl = 5,
    cpp_for_open_cl = 6,
    sycl = 7,
    hero_c = 8,
    nzsl = 9,
    _,
};

pub const ReflectCapability = extern struct {
    value: Capability,
    word_offset: u32,
};

pub const Capability = enum(c_uint) {
    matrix = 0,
    shader = 1,
    geometry = 2,
    tessellation = 3,
    addresses = 4,
    linkage = 5,
    kernel = 6,
    vector16 = 7,
    float16_buffer = 8,
    float16 = 9,
    float64 = 10,
    int64 = 11,
    int64_atomics = 12,
    image_basic = 13,
    image_read_write = 14,
    image_mipmap = 15,
    pipes = 17,
    groups = 18,
    device_enqueue = 19,
    literal_sampler = 20,
    atomic_storage = 21,
    int16 = 22,
    tessellation_point_size = 23,
    geometry_point_size = 24,
    image_gather_extended = 25,
    storage_image_multisample = 27,
    uniform_buffer_array_dynamic_indexing = 28,
    sampled_image_array_dynamic_indexing = 29,
    storage_buffer_array_dynamic_indexing = 30,
    storage_image_array_dynamic_indexing = 31,
    clip_distance = 32,
    cull_distance = 33,
    image_cube_array = 34,
    sample_rate_shading = 35,
    image_rect = 36,
    sampled_rect = 37,
    generic_pointer = 38,
    int8 = 39,
    input_attachment = 40,
    sparse_residency = 41,
    min_lod = 42,
    sampled1d = 43,
    image1d = 44,
    sampled_cube_array = 45,
    sampled_buffer = 46,
    image_buffer = 47,
    image_ms_array = 48,
    storage_image_extended_formats = 49,
    image_query = 50,
    derivative_control = 51,
    interpolation_function = 52,
    transform_feedback = 53,
    geometry_streams = 54,
    storage_image_read_without_format = 55,
    storage_image_write_without_format = 56,
    multi_viewport = 57,
    subgroup_dispatch = 58,
    named_barrier = 59,
    pipe_storage = 60,
    group_non_uniform = 61,
    group_non_uniform_vote = 62,
    group_non_uniform_arithmetic = 63,
    group_non_uniform_ballot = 64,
    group_non_uniform_shuffle = 65,
    group_non_uniform_shuffle_relative = 66,
    group_non_uniform_clustered = 67,
    group_non_uniform_quad = 68,
    shader_layer = 69,
    shader_viewport_index = 70,
    uniform_decoration = 71,
    core_builtins_arm = 4165,
    tile_image_color_read_access_ext = 4166,
    tile_image_depth_read_access_ext = 4167,
    tile_image_stencil_read_access_ext = 4168,
    fragment_shading_rate_khr = 4422,
    subgroup_ballot_khr = 4423,
    draw_parameters = 4427,
    workgroup_memory_explicit_layout_khr = 4428,
    workgroup_memory_explicit_layout8_bit_access_khr = 4429,
    workgroup_memory_explicit_layout16_bit_access_khr = 4430,
    subgroup_vote_khr = 4431,
    storage_buffer_16_bit_access = 4433,
    uniform_and_storage_buffer_16_bit_access = 4434,
    storage_push_constant16 = 4435,
    storage_input_output16 = 4436,
    device_group = 4437,
    multi_view = 4439,
    variable_pointers_storage_buffer = 4441,
    variable_pointers = 4442,
    atomic_storage_ops = 4445,
    sample_mask_post_depth_coverage = 4447,
    storage_buffer8_bit_access = 4448,
    uniform_and_storage_buffer8_bit_access = 4449,
    storage_push_constant8 = 4450,
    denorm_preserve = 4464,
    denorm_flush_to_zero = 4465,
    signed_zero_inf_nan_preserve = 4466,
    rounding_mode_rte = 4467,
    rounding_mode_rtz = 4468,
    ray_query_provisional_khr = 4471,
    ray_query_khr = 4472,
    ray_traversal_primitive_culling_khr = 4478,
    ray_tracing_khr = 4479,
    texture_sample_weighted_qcom = 4484,
    texture_box_filter_qcom = 4485,
    texture_block_match_qcom = 4486,
    float16_image_amd = 5008,
    image_gather_bias_lod_amd = 5009,
    fragment_mask_amd = 5010,
    stencil_export_ext = 5013,
    image_read_write_lod_amd = 5015,
    int64_image_ext = 5016,
    shader_clock_khr = 5055,
    sample_mask_override_coverage_nv = 5249,
    geometry_shader_passthrough_nv = 5251,
    shader_viewport_index_layer_ext = 5254,
    shader_viewport_mask_nv = 5255,
    shader_stereo_view_nv = 5259,
    per_view_attributes_nv = 5260,
    fragment_fully_covered_ext = 5265,
    mesh_shading_nv = 5266,
    image_footprint_nv = 5282,
    mesh_shading_ext = 5283,
    fragment_barycentric_khr = 5284,
    compute_derivative_group_quads_nv = 5288,
    fragment_density_ext = 5291,
    group_non_uniform_partitioned_nv = 5297,
    shader_non_uniform = 5301,
    runtime_descriptor_array = 5302,
    input_attachment_array_dynamic_indexing = 5303,
    uniform_texel_buffer_array_dynamic_indexing = 5304,
    storage_texel_buffer_array_dynamic_indexing = 5305,
    uniform_buffer_array_non_uniform_indexing = 5306,
    sampled_image_array_non_uniform_indexing = 5307,
    storage_buffer_array_non_uniform_indexing = 5308,
    storage_image_array_non_uniform_indexing = 5309,
    input_attachment_array_non_uniform_indexing = 5310,
    uniform_texel_buffer_array_non_uniform_indexing = 5311,
    storage_texel_buffer_array_non_uniform_indexing = 5312,
    ray_tracing_position_fetch_khr = 5336,
    ray_tracing_nv = 5340,
    ray_tracing_motion_blur_nv = 5341,
    vulkan_memory_model = 5345,
    vulkan_memory_model_device_scope = 5346,
    physical_storage_buffer_addresses = 5347,
    compute_derivative_group_linear_nv = 5350,
    ray_tracing_provisional_khr = 5353,
    cooperative_matrix_nv = 5357,
    fragment_shader_sample_interlock_ext = 5363,
    fragment_shader_shading_rate_interlock_ext = 5372,
    shader_sm_builtins_nv = 5373,
    fragment_shader_pixel_interlock_ext = 5378,
    demote_to_helper_invocation = 5379,
    ray_tracing_opacity_micromap_ext = 5381,
    shader_invocation_reorder_nv = 5383,
    bindless_texture_nv = 5390,
    ray_query_position_fetch_khr = 5391,
    subgroup_shuffle_intel = 5568,
    subgroup_buffer_block_iointel = 5569,
    subgroup_image_block_iointel = 5570,
    subgroup_image_media_block_iointel = 5579,
    round_to_infinity_intel = 5582,
    floating_point_mode_intel = 5583,
    integer_functions2_intel = 5584,
    function_pointers_intel = 5603,
    indirect_references_intel = 5604,
    asm_intel = 5606,
    atomic_float32_min_max_ext = 5612,
    atomic_float64_min_max_ext = 5613,
    atomic_float16_min_max_ext = 5616,
    vector_compute_intel = 5617,
    vector_any_intel = 5619,
    expect_assume_khr = 5629,
    subgroup_avc_motion_estimation_intel = 5696,
    subgroup_avc_motion_estimation_intra_intel = 5697,
    subgroup_avc_motion_estimation_chroma_intel = 5698,
    variable_length_array_intel = 5817,
    function_float_control_intel = 5821,
    fpga_memory_attributes_intel = 5824,
    fp_fast_math_mode_intel = 5837,
    arbitrary_precision_integers_intel = 5844,
    arbitrary_precision_floating_point_intel = 5845,
    unstructured_loop_controls_intel = 5886,
    fpga_loop_controls_intel = 5888,
    kernel_attributes_intel = 5892,
    fpga_kernel_attributes_intel = 5897,
    fpga_memory_accesses_intel = 5898,
    fpga_cluster_attributes_intel = 5904,
    loop_fuse_intel = 5906,
    fpgadsp_control_intel = 5908,
    memory_access_aliasing_intel = 5910,
    fpga_invocation_pipelining_attributes_intel = 5916,
    fpga_buffer_location_intel = 5920,
    arbitrary_precision_fixed_point_intel = 5922,
    usm_storage_classes_intel = 5935,
    runtime_aligned_attribute_intel = 5939,
    io_pipes_intel = 5943,
    blocking_pipes_intel = 5945,
    fpga_reg_intel = 5948,
    dot_product_input_all = 6016,
    dot_product_input4x8_bit = 6017,
    dot_product_input4x8_bit_packed = 6018,
    dot_product = 6019,
    ray_cull_mask_khr = 6020,
    cooperative_matrix_khr = 6022,
    bit_instructions = 6025,
    group_non_uniform_rotate_khr = 6026,
    atomic_float32_add_ext = 6033,
    atomic_float64_add_ext = 6034,
    long_constant_composite_intel = 6089,
    opt_none_intel = 6094,
    atomic_float16_add_ext = 6095,
    debug_info_module_intel = 6114,
    b_float16_conversion_intel = 6115,
    split_barrier_intel = 6141,
    fpga_kernel_attributesv2_intel = 6161,
    fpga_latency_control_intel = 6171,
    fpga_argument_interfaces_intel = 6174,
    group_uniform_arithmetic_khr = 6400,
    _,
};

pub const ExecutionModel = enum(c_uint) {
    vertex = 0,
    tessellation_control = 1,
    tessellation_evaluation = 2,
    geometry = 3,
    fragment = 4,
    gl_compute = 5,
    kernel = 6,
    task_nv = 5267,
    mesh_nv = 5268,
    ray_generation_khr = 5313,
    intersection_khr = 5314,
    any_hit_khr = 5315,
    closest_hit_khr = 5316,
    miss_khr = 5317,
    callable_khr = 5318,
    task_ext = 5364,
    mesh_ext = 5365,
    _,
};

pub const ExecutionMode = enum(c_uint) {
    invocations = 0,
    spacing_equal = 1,
    spacing_fractional_even = 2,
    spacing_fractional_odd = 3,
    vertex_order_cw = 4,
    vertex_order_ccw = 5,
    pixel_center_integer = 6,
    origin_upper_left = 7,
    origin_lower_left = 8,
    early_fragment_tests = 9,
    point_mode = 10,
    xfb = 11,
    depth_replacing = 12,
    depth_greater = 14,
    depth_less = 15,
    depth_unchanged = 16,
    local_size = 17,
    local_size_hint = 18,
    input_points = 19,
    input_lines = 20,
    input_lines_adjacency = 21,
    triangles = 22,
    input_triangles_adjacency = 23,
    quads = 24,
    isolines = 25,
    output_vertices = 26,
    output_points = 27,
    output_line_strip = 28,
    output_triangle_strip = 29,
    vec_type_hint = 30,
    contraction_off = 31,
    initializer = 33,
    finalizer = 34,
    subgroup_size = 35,
    subgroups_per_workgroup = 36,
    subgroups_per_workgroup_id = 37,
    local_size_id = 38,
    local_size_hint_id = 39,
    non_coherent_color_attachment_read_ext = 4169,
    non_coherent_depth_attachment_read_ext = 4170,
    non_coherent_stencil_attachment_read_ext = 4171,
    subgroup_uniform_control_flow_khr = 4421,
    post_depth_coverage = 4446,
    denorm_preserve = 4459,
    denorm_flush_to_zero = 4460,
    signed_zero_inf_nan_preserve = 4461,
    rounding_mode_rte = 4462,
    rounding_mode_rtz = 4463,
    early_and_late_fragment_tests_amd = 5017,
    stencil_ref_replacing_ext = 5027,
    stencil_ref_unchanged_front_amd = 5079,
    stencil_ref_greater_front_amd = 5080,
    stencil_ref_less_front_amd = 5081,
    stencil_ref_unchanged_back_amd = 5082,
    stencil_ref_greater_back_amd = 5083,
    stencil_ref_less_back_amd = 5084,
    output_lines_ext = 5269,
    output_primitives_ext = 5270,
    derivative_group_quads_nv = 5289,
    derivative_group_linear_nv = 5290,
    output_triangles_ext = 5298,
    pixel_interlock_ordered_ext = 5366,
    pixel_interlock_unordered_ext = 5367,
    sample_interlock_ordered_ext = 5368,
    sample_interlock_unordered_ext = 5369,
    shading_rate_interlock_ordered_ext = 5370,
    shading_rate_interlock_unordered_ext = 5371,
    shared_local_memory_size_intel = 5618,
    rounding_mode_rtpintel = 5620,
    rounding_mode_rtnintel = 5621,
    floating_point_mode_altintel = 5622,
    floating_point_mode_ieeeintel = 5623,
    max_workgroup_size_intel = 5893,
    max_work_dim_intel = 5894,
    no_global_offset_intel = 5895,
    num_simd_workitems_intel = 5896,
    scheduler_target_fmax_mhz_intel = 5903,
    streaming_interface_intel = 6154,
    register_map_interface_intel = 6160,
    named_barrier_count_intel = 6417,
    _,
};

pub const ShaderStageFlags = packed struct(c_uint) {
    vertex_bit: bool = false,
    tessellation_control_bit: bool = false,
    tessellation_evaluation_bit: bool = false,
    geometry_bit: bool = false,
    fragment_bit: bool = false,
    compute_bit: bool = false,
    task_bit_ext: bool = false,
    mesh_bit_ext: bool = false,
    raygen_bit_khr: bool = false,
    any_hit_bit_khr: bool = false,
    closest_hit_bit_khr: bool = false,
    miss_bit_khr: bool = false,
    intersection_bit_khr: bool = false,
    callable_bit_khr: bool = false,
    _padding: std.meta.Int(.unsigned, @bitSizeOf(c_uint) - 14) = 0,
};

pub const TypeDescription = extern struct {
    id: u32,
    op: Op,
    type_name: ?[*:0]const u8,
    struct_member_name: ?[*:0]const u8,
    storage_class: StorageClass,
    type_flags: TypeFlags,
    decoration_flags: DecorationFlags,
    traits: extern struct {
        numeric: NumericTraits,
        image: ImageTraits,
        array: ArrayTraits,
    },
    struct_type_description: ?*TypeDescription,
    copied: u32,
    member_count: u32,
    members: ?[*]TypeDescription,
};

pub const DescriptorSet = extern struct {
    set: u32,
    binding_count: u32,
    bindings: ?[*]*DescriptorBinding,
};

pub const InterfaceVariable = extern struct {
    spirv_id: u32,
    name: ?[*:0]const u8,
    location: u32,
    component: u32,
    storage_class: StorageClass,
    semantic: ?[*:0]const u8,
    decoration_flags: DecorationFlags,
    built_in: BuiltIn,
    numeric: NumericTraits,
    array: ArrayTraits,
    member_count: u32,
    members: ?[*]InterfaceVariable,
    format: Format,
    type_description: ?*TypeDescription,
    word_offset: extern struct {
        location: u32,
    },
};

pub const BlockVariable = extern struct {
    spirv_id: u32,
    name: ?[*:0]const u8,
    offset: u32,
    absolute_offset: u32,
    size: u32,
    padded_size: u32,
    decoration_flags: DecorationFlags,
    numeric: NumericTraits,
    array: ArrayTraits,
    flags: VariableFlags,
    member_count: u32,
    members: ?[*]BlockVariable,
    type_description: ?*TypeDescription,
    word_offset: extern struct {
        offset: u32,
    },
};

pub const SpecializationConstant = extern struct {
    spirv_id: u32,
    constant_id: u32,
    name: ?[*:0]const u8,
};

pub const DescriptorType = enum(c_uint) {
    sampler = 0,
    combined_image_sampler = 1,
    sampled_image = 2,
    storage_image = 3,
    uniform_texel_buffer = 4,
    storage_texel_buffer = 5,
    uniform_buffer = 6,
    storage_buffer = 7,
    uniform_buffer_dynamic = 8,
    storage_buffer_dynamic = 9,
    input_attachment = 10,
    acceleration_structure_khr = 1000150000,
    _,
};

pub const ResourceType = enum(c_uint) {
    UNDEFINED = 0,
    SAMPLER = 1,
    CBV = 2,
    SRV = 4,
    UAV = 8,
    _,
};

pub const ImageTraits = extern struct {
    dim: Dim,
    depth: u32,
    arrayed: u32,
    ms: u32,
    sampled: u32,
    image_format: ImageFormat,
};

pub const BindingArrayTraits = extern struct {
    dims_count: u32,
    dims: [32]u32,
};

pub const DecorationFlags = packed struct(u32) {
    block: bool = false,
    buffer_block: bool = false,
    row_major: bool = false,
    column_major: bool = false,
    built_in: bool = false,
    noperspective: bool = false,
    flat: bool = false,
    non_writable: bool = false,
    relaxed_precision: bool = false,
    non_readable: bool = false,
    patch: bool = false,
    per_vertex: bool = false,
    per_task: bool = false,
    weight_texture: bool = false,
    block_match_texture: bool = false,
    _padding: u17 = 0,
};

pub const UserType = enum(c_uint) {
    invalid = 0,
    cbuffer = 1,
    tbuffer = 2,
    append_structured_buffer = 3,
    buffer = 4,
    byte_address_buffer = 5,
    constant_buffer = 6,
    consume_structured_buffer = 7,
    input_patch = 8,
    output_patch = 9,
    rasterizer_ordered_buffer = 10,
    rasterizer_ordered_byte_address_buffer = 11,
    rasterizer_ordered_structured_buffer = 12,
    rasterizer_ordered_texture_1d = 13,
    rasterizer_ordered_texture_1d_array = 14,
    rasterizer_ordered_texture_2d = 15,
    rasterizer_ordered_texture_2d_array = 16,
    rasterizer_ordered_texture_3d = 17,
    raytracing_acceleration_structure = 18,
    rw_buffer = 19,
    rw_byte_address_buffer = 20,
    rw_structured_buffer = 21,
    rw_texture_1d = 22,
    rw_texture_1d_array = 23,
    rw_texture_2d = 24,
    rw_texture_2d_array = 25,
    rw_texture_3d = 26,
    structured_buffer = 27,
    subpass_input = 28,
    subpass_input_ms = 29,
    texture_1d = 30,
    texture_1d_array = 31,
    texture_2d = 32,
    texture_2d_array = 33,
    texture_2dms = 34,
    texture_2dms_array = 35,
    texture_3d = 36,
    texture_buffer = 37,
    texture_cube = 38,
    texture_cube_array = 39,
    _,
};

pub const StorageClass = enum(c_uint) {
    uniform_constant = 0,
    input = 1,
    uniform = 2,
    output = 3,
    workgroup = 4,
    cross_workgroup = 5,
    private = 6,
    function = 7,
    generic = 8,
    push_constant = 9,
    atomic_counter = 10,
    image = 11,
    storage_buffer = 12,
    tile_image_ext = 4172,
    callable_data_khr = 5328,
    incoming_callable_data_khr = 5329,
    ray_payload_khr = 5338,
    hit_attribute_khr = 5339,
    incoming_ray_payload_khr = 5342,
    shader_record_buffer_khr = 5343,
    physical_storage_buffer = 5349,
    hit_object_attribute_nv = 5385,
    task_payload_workgroup_ext = 5402,
    code_section_intel = 5605,
    device_only_intel = 5936,
    host_only_intel = 5937,
    _,
};

pub const TypeFlags = packed struct(u32) {
    undefined: bool = false,
    void: bool = false,
    bool: bool = false,
    int: bool = false,
    float: bool = false,
    _padding0: u4 = 0,
    vector: bool = false,
    matrix: bool = false,
    _padding1: u8 = 0,
    external_image: bool = false,
    external_sampler: bool = false,
    external_sampled_image: bool = false,
    external_block: bool = false,
    external_acceleration_structure: bool = false,
    _padding2: u3 = 0,
    @"struct": bool = false,
    array: bool = false,
    ref: bool = false,
    _padding3: u2 = 0,

    pub const external_mask = .{
        .undefined = true,
        .void = true,
        .bool = true,
        .int = true,
        .float = true,
        ._padding0 = 0xf,
        .vector = true,
        .matrix = true,
    };
};

pub const NumericTraits = extern struct {
    pub const Scalar = extern struct {
        width: u32,
        signedness: u32,
    };

    pub const Vector = extern struct {
        component_count: u32,
    };

    pub const Matrix = extern struct {
        column_count: u32,
        row_count: u32,
        stride: u32,
    };

    scalar: Scalar,
    vector: Vector,
    matrix: Matrix,
};

pub const Dim = enum(c_uint) {
    @"1d" = 0,
    @"2d" = 1,
    @"3d" = 2,
    cube = 3,
    rect = 4,
    buffer = 5,
    subpass_data = 6,
    tile_image_data_ext = 4173,
    _,
};

pub const ImageFormat = enum(c_uint) {
    unknown = 0,
    rgba32f = 1,
    rgba16f = 2,
    r32f = 3,
    rgba8 = 4,
    rgba8_snorm = 5,
    rg32f = 6,
    rg16f = 7,
    r11fg11fb10f = 8,
    r16f = 9,
    rgba16 = 10,
    rgb10a2 = 11,
    rg16 = 12,
    rg8 = 13,
    r16 = 14,
    r8 = 15,
    rgba16_snorm = 16,
    rg16_snorm = 17,
    rg8_snorm = 18,
    r16_snorm = 19,
    r8_snorm = 20,
    rgba32i = 21,
    rgba16i = 22,
    rgba8i = 23,
    r32i = 24,
    rg32i = 25,
    rg16i = 26,
    rg8i = 27,
    r16i = 28,
    r8i = 29,
    rgba32ui = 30,
    rgba16ui = 31,
    rgba8ui = 32,
    r32ui = 33,
    rgb10a2ui = 34,
    rg32ui = 35,
    rg16ui = 36,
    rg8ui = 37,
    r16ui = 38,
    r8ui = 39,
    r64ui = 40,
    r64i = 41,
    _,
};

pub const ArrayTraits = extern struct {
    dims_count: u32,
    dims: [32]u32,
    spec_constant_op_ids: [32]u32,
    stride: u32,
};

pub const Op = enum(c_uint) {
    nop = 0,
    undef = 1,
    source_continued = 2,
    source = 3,
    source_extension = 4,
    name = 5,
    member_name = 6,
    string = 7,
    line = 8,
    extension = 10,
    ext_inst_import = 11,
    ext_inst = 12,
    memory_model = 14,
    entry_point = 15,
    execution_mode = 16,
    capability = 17,
    type_void = 19,
    type_bool = 20,
    type_int = 21,
    type_float = 22,
    type_vector = 23,
    type_matrix = 24,
    type_image = 25,
    type_sampler = 26,
    type_sampled_image = 27,
    type_array = 28,
    type_runtime_array = 29,
    type_struct = 30,
    type_opaque = 31,
    type_pointer = 32,
    type_function = 33,
    type_event = 34,
    type_device_event = 35,
    type_reserve_id = 36,
    type_queue = 37,
    type_pipe = 38,
    type_forward_pointer = 39,
    constant_true = 41,
    constant_false = 42,
    constant = 43,
    constant_composite = 44,
    constant_sampler = 45,
    constant_null = 46,
    spec_constant_true = 48,
    spec_constant_false = 49,
    spec_constant = 50,
    spec_constant_composite = 51,
    spec_constant_op = 52,
    function = 54,
    function_parameter = 55,
    function_end = 56,
    function_call = 57,
    variable = 59,
    image_texel_pointer = 60,
    load = 61,
    store = 62,
    copy_memory = 63,
    copy_memory_sized = 64,
    access_chain = 65,
    in_bounds_access_chain = 66,
    ptr_access_chain = 67,
    array_length = 68,
    generic_ptr_mem_semantics = 69,
    in_bounds_ptr_access_chain = 70,
    decorate = 71,
    member_decorate = 72,
    decoration_group = 73,
    group_decorate = 74,
    group_member_decorate = 75,
    vector_extract_dynamic = 77,
    vector_insert_dynamic = 78,
    vector_shuffle = 79,
    composite_construct = 80,
    composite_extract = 81,
    composite_insert = 82,
    copy_object = 83,
    transpose = 84,
    sampled_image = 86,
    image_sample_implicit_lod = 87,
    image_sample_explicit_lod = 88,
    image_sample_dref_implicit_lod = 89,
    image_sample_dref_explicit_lod = 90,
    image_sample_proj_implicit_lod = 91,
    image_sample_proj_explicit_lod = 92,
    image_sample_proj_dref_implicit_lod = 93,
    image_sample_proj_dref_explicit_lod = 94,
    image_fetch = 95,
    image_gather = 96,
    image_dref_gather = 97,
    image_read = 98,
    image_write = 99,
    image = 100,
    image_query_format = 101,
    image_query_order = 102,
    image_query_size_lod = 103,
    image_query_size = 104,
    image_query_lod = 105,
    image_query_levels = 106,
    image_query_samples = 107,
    convert_f_to_u = 109,
    convert_f_to_s = 110,
    convert_s_to_f = 111,
    convert_u_to_f = 112,
    u_convert = 113,
    s_convert = 114,
    f_convert = 115,
    quantize_to_f16 = 116,
    convert_ptr_to_u = 117,
    sat_convert_s_to_u = 118,
    sat_convert_u_to_s = 119,
    convert_u_to_ptr = 120,
    ptr_cast_to_generic = 121,
    generic_cast_to_ptr = 122,
    generic_cast_to_ptr_explicit = 123,
    bitcast = 124,
    s_negate = 126,
    f_negate = 127,
    i_add = 128,
    f_add = 129,
    i_sub = 130,
    f_sub = 131,
    i_mul = 132,
    f_mul = 133,
    u_div = 134,
    s_div = 135,
    f_div = 136,
    u_mod = 137,
    s_rem = 138,
    s_mod = 139,
    f_rem = 140,
    f_mod = 141,
    vector_times_scalar = 142,
    matrix_times_scalar = 143,
    vector_times_matrix = 144,
    matrix_times_vector = 145,
    matrix_times_matrix = 146,
    outer_product = 147,
    dot = 148,
    i_add_carry = 149,
    i_sub_borrow = 150,
    u_mul_extended = 151,
    s_mul_extended = 152,
    any = 154,
    all = 155,
    is_nan = 156,
    is_inf = 157,
    is_finite = 158,
    is_normal = 159,
    sign_bit_set = 160,
    less_or_greater = 161,
    ordered = 162,
    unordered = 163,
    logical_equal = 164,
    logical_not_equal = 165,
    logical_or = 166,
    logical_and = 167,
    logical_not = 168,
    select = 169,
    i_equal = 170,
    i_not_equal = 171,
    u_greater_than = 172,
    s_greater_than = 173,
    u_greater_than_equal = 174,
    s_greater_than_equal = 175,
    u_less_than = 176,
    s_less_than = 177,
    u_less_than_equal = 178,
    s_less_than_equal = 179,
    f_ord_equal = 180,
    f_unord_equal = 181,
    f_ord_not_equal = 182,
    f_unord_not_equal = 183,
    f_ord_less_than = 184,
    f_unord_less_than = 185,
    f_ord_greater_than = 186,
    f_unord_greater_than = 187,
    f_ord_less_than_equal = 188,
    f_unord_less_than_equal = 189,
    f_ord_greater_than_equal = 190,
    f_unord_greater_than_equal = 191,
    shift_right_logical = 194,
    shift_right_arithmetic = 195,
    shift_left_logical = 196,
    bitwise_or = 197,
    bitwise_xor = 198,
    bitwise_and = 199,
    not = 200,
    bit_field_insert = 201,
    bit_field_s_extract = 202,
    bit_field_u_extract = 203,
    bit_reverse = 204,
    bit_count = 205,
    d_pdx = 207,
    d_pdy = 208,
    fwidth = 209,
    d_pdx_fine = 210,
    d_pdy_fine = 211,
    fwidth_fine = 212,
    d_pdx_coarse = 213,
    d_pdy_coarse = 214,
    fwidth_coarse = 215,
    emit_vertex = 218,
    end_primitive = 219,
    emit_stream_vertex = 220,
    end_stream_primitive = 221,
    control_barrier = 224,
    memory_barrier = 225,
    atomic_load = 227,
    atomic_store = 228,
    atomic_exchange = 229,
    atomic_compare_exchange = 230,
    atomic_compare_exchange_weak = 231,
    atomic_i_increment = 232,
    atomic_i_decrement = 233,
    atomic_i_add = 234,
    atomic_i_sub = 235,
    atomic_s_min = 236,
    atomic_u_min = 237,
    atomic_s_max = 238,
    atomic_u_max = 239,
    atomic_and = 240,
    atomic_or = 241,
    atomic_xor = 242,
    phi = 245,
    loop_merge = 246,
    selection_merge = 247,
    label = 248,
    branch = 249,
    branch_conditional = 250,
    @"switch" = 251,
    kill = 252,
    @"return" = 253,
    return_value = 254,
    @"unreachable" = 255,
    lifetime_start = 256,
    lifetime_stop = 257,
    group_async_copy = 259,
    group_wait_events = 260,
    group_all = 261,
    group_any = 262,
    group_broadcast = 263,
    group_i_add = 264,
    group_f_add = 265,
    group_f_min = 266,
    group_u_min = 267,
    group_s_min = 268,
    group_f_max = 269,
    group_u_max = 270,
    group_s_max = 271,
    read_pipe = 274,
    write_pipe = 275,
    reserved_read_pipe = 276,
    reserved_write_pipe = 277,
    reserve_read_pipe_packets = 278,
    reserve_write_pipe_packets = 279,
    commit_read_pipe = 280,
    commit_write_pipe = 281,
    is_valid_reserve_id = 282,
    get_num_pipe_packets = 283,
    get_max_pipe_packets = 284,
    group_reserve_read_pipe_packets = 285,
    group_reserve_write_pipe_packets = 286,
    group_commit_read_pipe = 287,
    group_commit_write_pipe = 288,
    enqueue_marker = 291,
    enqueue_kernel = 292,
    get_kernel_n_drange_sub_group_count = 293,
    get_kernel_n_drange_max_sub_group_size = 294,
    get_kernel_work_group_size = 295,
    get_kernel_preferred_work_group_size_multiple = 296,
    retain_event = 297,
    release_event = 298,
    create_user_event = 299,
    is_valid_event = 300,
    set_user_event_status = 301,
    capture_event_profiling_info = 302,
    get_default_queue = 303,
    build_nd_range = 304,
    image_sparse_sample_implicit_lod = 305,
    image_sparse_sample_explicit_lod = 306,
    image_sparse_sample_dref_implicit_lod = 307,
    image_sparse_sample_dref_explicit_lod = 308,
    image_sparse_sample_proj_implicit_lod = 309,
    image_sparse_sample_proj_explicit_lod = 310,
    image_sparse_sample_proj_dref_implicit_lod = 311,
    image_sparse_sample_proj_dref_explicit_lod = 312,
    image_sparse_fetch = 313,
    image_sparse_gather = 314,
    image_sparse_dref_gather = 315,
    image_sparse_texels_resident = 316,
    no_line = 317,
    atomic_flag_test_and_set = 318,
    atomic_flag_clear = 319,
    image_sparse_read = 320,
    size_of = 321,
    type_pipe_storage = 322,
    constant_pipe_storage = 323,
    create_pipe_from_pipe_storage = 324,
    get_kernel_local_size_for_subgroup_count = 325,
    get_kernel_max_num_subgroups = 326,
    type_named_barrier = 327,
    named_barrier_initialize = 328,
    memory_named_barrier = 329,
    module_processed = 330,
    execution_mode_id = 331,
    decorate_id = 332,
    group_non_uniform_elect = 333,
    group_non_uniform_all = 334,
    group_non_uniform_any = 335,
    group_non_uniform_all_equal = 336,
    group_non_uniform_broadcast = 337,
    group_non_uniform_broadcast_first = 338,
    group_non_uniform_ballot = 339,
    group_non_uniform_inverse_ballot = 340,
    group_non_uniform_ballot_bit_extract = 341,
    group_non_uniform_ballot_bit_count = 342,
    group_non_uniform_ballot_find_lsb = 343,
    group_non_uniform_ballot_find_msb = 344,
    group_non_uniform_shuffle = 345,
    group_non_uniform_shuffle_xor = 346,
    group_non_uniform_shuffle_up = 347,
    group_non_uniform_shuffle_down = 348,
    group_non_uniform_i_add = 349,
    group_non_uniform_f_add = 350,
    group_non_uniform_i_mul = 351,
    group_non_uniform_f_mul = 352,
    group_non_uniform_s_min = 353,
    group_non_uniform_u_min = 354,
    group_non_uniform_f_min = 355,
    group_non_uniform_s_max = 356,
    group_non_uniform_u_max = 357,
    group_non_uniform_f_max = 358,
    group_non_uniform_bitwise_and = 359,
    group_non_uniform_bitwise_or = 360,
    group_non_uniform_bitwise_xor = 361,
    group_non_uniform_logical_and = 362,
    group_non_uniform_logical_or = 363,
    group_non_uniform_logical_xor = 364,
    group_non_uniform_quad_broadcast = 365,
    group_non_uniform_quad_swap = 366,
    copy_logical = 400,
    ptr_equal = 401,
    ptr_not_equal = 402,
    ptr_diff = 403,
    color_attachment_read_ext = 4160,
    depth_attachment_read_ext = 4161,
    stencil_attachment_read_ext = 4162,
    terminate_invocation = 4416,
    subgroup_ballot_khr = 4421,
    subgroup_first_invocation_khr = 4422,
    subgroup_all_khr = 4428,
    subgroup_any_khr = 4429,
    subgroup_all_equal_khr = 4430,
    group_non_uniform_rotate_khr = 4431,
    subgroup_read_invocation_khr = 4432,
    trace_ray_khr = 4445,
    execute_callable_khr = 4446,
    convert_u_to_acceleration_structure_khr = 4447,
    ignore_intersection_khr = 4448,
    terminate_ray_khr = 4449,
    s_dot = 4450,
    u_dot = 4451,
    su_dot = 4452,
    s_dot_acc_sat = 4453,
    u_dot_acc_sat = 4454,
    su_dot_acc_sat = 4455,
    type_cooperative_matrix_khr = 4456,
    cooperative_matrix_load_khr = 4457,
    cooperative_matrix_store_khr = 4458,
    cooperative_matrix_mul_add_khr = 4459,
    cooperative_matrix_length_khr = 4460,
    type_ray_query_khr = 4472,
    ray_query_initialize_khr = 4473,
    ray_query_terminate_khr = 4474,
    ray_query_generate_intersection_khr = 4475,
    ray_query_confirm_intersection_khr = 4476,
    ray_query_proceed_khr = 4477,
    ray_query_get_intersection_type_khr = 4479,
    image_sample_weighted_qcom = 4480,
    image_box_filter_qcom = 4481,
    image_block_match_ssdqcom = 4482,
    image_block_match_sadqcom = 4483,
    group_i_add_non_uniform_amd = 5000,
    group_f_add_non_uniform_amd = 5001,
    group_f_min_non_uniform_amd = 5002,
    group_u_min_non_uniform_amd = 5003,
    group_s_min_non_uniform_amd = 5004,
    group_f_max_non_uniform_amd = 5005,
    group_u_max_non_uniform_amd = 5006,
    group_s_max_non_uniform_amd = 5007,
    fragment_mask_fetch_amd = 5011,
    fragment_fetch_amd = 5012,
    read_clock_khr = 5056,
    hit_object_record_hit_motion_nv = 5249,
    hit_object_record_hit_with_index_motion_nv = 5250,
    hit_object_record_miss_motion_nv = 5251,
    hit_object_get_world_to_object_nv = 5252,
    hit_object_get_object_to_world_nv = 5253,
    hit_object_get_object_ray_direction_nv = 5254,
    hit_object_get_object_ray_origin_nv = 5255,
    hit_object_trace_ray_motion_nv = 5256,
    hit_object_get_shader_record_buffer_handle_nv = 5257,
    hit_object_get_shader_binding_table_record_index_nv = 5258,
    hit_object_record_empty_nv = 5259,
    hit_object_trace_ray_nv = 5260,
    hit_object_record_hit_nv = 5261,
    hit_object_record_hit_with_index_nv = 5262,
    hit_object_record_miss_nv = 5263,
    hit_object_execute_shader_nv = 5264,
    hit_object_get_current_time_nv = 5265,
    hit_object_get_attributes_nv = 5266,
    hit_object_get_hit_kind_nv = 5267,
    hit_object_get_primitive_index_nv = 5268,
    hit_object_get_geometry_index_nv = 5269,
    hit_object_get_instance_id_nv = 5270,
    hit_object_get_instance_custom_index_nv = 5271,
    hit_object_get_world_ray_direction_nv = 5272,
    hit_object_get_world_ray_origin_nv = 5273,
    hit_object_get_ray_t_max_nv = 5274,
    hit_object_get_ray_t_min_nv = 5275,
    hit_object_is_empty_nv = 5276,
    hit_object_is_hit_nv = 5277,
    hit_object_is_miss_nv = 5278,
    reorder_thread_with_hit_object_nv = 5279,
    reorder_thread_with_hint_nv = 5280,
    type_hit_object_nv = 5281,
    image_sample_footprint_nv = 5283,
    emit_mesh_tasks_ext = 5294,
    set_mesh_outputs_ext = 5295,
    group_non_uniform_partition_nv = 5296,
    write_packed_primitive_indices4x8_nv = 5299,
    report_intersection_khr = 5334,
    ignore_intersection_nv = 5335,
    terminate_ray_nv = 5336,
    trace_nv = 5337,
    trace_motion_nv = 5338,
    trace_ray_motion_nv = 5339,
    ray_query_get_intersection_triangle_vertex_positions_khr = 5340,
    type_acceleration_structure_khr = 5341,
    execute_callable_nv = 5344,
    type_cooperative_matrix_nv = 5358,
    cooperative_matrix_load_nv = 5359,
    cooperative_matrix_store_nv = 5360,
    cooperative_matrix_mul_add_nv = 5361,
    cooperative_matrix_length_nv = 5362,
    begin_invocation_interlock_ext = 5364,
    end_invocation_interlock_ext = 5365,
    demote_to_helper_invocation = 5380,
    is_helper_invocation_ext = 5381,
    convert_u_to_image_nv = 5391,
    convert_u_to_sampler_nv = 5392,
    convert_image_to_unv = 5393,
    convert_sampler_to_unv = 5394,
    convert_u_to_sampled_image_nv = 5395,
    convert_sampled_image_to_unv = 5396,
    sampler_image_addressing_mode_nv = 5397,
    subgroup_shuffle_intel = 5571,
    subgroup_shuffle_down_intel = 5572,
    subgroup_shuffle_up_intel = 5573,
    subgroup_shuffle_xor_intel = 5574,
    subgroup_block_read_intel = 5575,
    subgroup_block_write_intel = 5576,
    subgroup_image_block_read_intel = 5577,
    subgroup_image_block_write_intel = 5578,
    subgroup_image_media_block_read_intel = 5580,
    subgroup_image_media_block_write_intel = 5581,
    u_count_leading_zeros_intel = 5585,
    u_count_trailing_zeros_intel = 5586,
    abs_i_sub_intel = 5587,
    abs_u_sub_intel = 5588,
    i_add_sat_intel = 5589,
    u_add_sat_intel = 5590,
    i_average_intel = 5591,
    u_average_intel = 5592,
    i_average_rounded_intel = 5593,
    u_average_rounded_intel = 5594,
    i_sub_sat_intel = 5595,
    u_sub_sat_intel = 5596,
    i_mul32x16_intel = 5597,
    u_mul32x16_intel = 5598,
    constant_function_pointer_intel = 5600,
    function_pointer_call_intel = 5601,
    asm_target_intel = 5609,
    asm_intel = 5610,
    asm_call_intel = 5611,
    atomic_f_min_ext = 5614,
    atomic_f_max_ext = 5615,
    assume_true_khr = 5630,
    expect_khr = 5631,
    decorate_string = 5632,
    member_decorate_string = 5633,
    vme_image_intel = 5699,
    type_vme_image_intel = 5700,
    type_avc_ime_payload_intel = 5701,
    type_avc_ref_payload_intel = 5702,
    type_avc_sic_payload_intel = 5703,
    type_avc_mce_payload_intel = 5704,
    type_avc_mce_result_intel = 5705,
    type_avc_ime_result_intel = 5706,
    type_avc_ime_result_single_reference_streamout_intel = 5707,
    type_avc_ime_result_dual_reference_streamout_intel = 5708,
    type_avc_ime_single_reference_streamin_intel = 5709,
    type_avc_ime_dual_reference_streamin_intel = 5710,
    type_avc_ref_result_intel = 5711,
    type_avc_sic_result_intel = 5712,
    subgroup_avc_mce_get_default_inter_base_multi_reference_penalty_intel = 5713,
    subgroup_avc_mce_set_inter_base_multi_reference_penalty_intel = 5714,
    subgroup_avc_mce_get_default_inter_shape_penalty_intel = 5715,
    subgroup_avc_mce_set_inter_shape_penalty_intel = 5716,
    subgroup_avc_mce_get_default_inter_direction_penalty_intel = 5717,
    subgroup_avc_mce_set_inter_direction_penalty_intel = 5718,
    subgroup_avc_mce_get_default_intra_luma_shape_penalty_intel = 5719,
    subgroup_avc_mce_get_default_inter_motion_vector_cost_table_intel = 5720,
    subgroup_avc_mce_get_default_high_penalty_cost_table_intel = 5721,
    subgroup_avc_mce_get_default_medium_penalty_cost_table_intel = 5722,
    subgroup_avc_mce_get_default_low_penalty_cost_table_intel = 5723,
    subgroup_avc_mce_set_motion_vector_cost_function_intel = 5724,
    subgroup_avc_mce_get_default_intra_luma_mode_penalty_intel = 5725,
    subgroup_avc_mce_get_default_non_dc_luma_intra_penalty_intel = 5726,
    subgroup_avc_mce_get_default_intra_chroma_mode_base_penalty_intel = 5727,
    subgroup_avc_mce_set_ac_only_haar_intel = 5728,
    subgroup_avc_mce_set_source_interlaced_field_polarity_intel = 5729,
    subgroup_avc_mce_set_single_reference_interlaced_field_polarity_intel = 5730,
    subgroup_avc_mce_set_dual_reference_interlaced_field_polarities_intel = 5731,
    subgroup_avc_mce_convert_to_ime_payload_intel = 5732,
    subgroup_avc_mce_convert_to_ime_result_intel = 5733,
    subgroup_avc_mce_convert_to_ref_payload_intel = 5734,
    subgroup_avc_mce_convert_to_ref_result_intel = 5735,
    subgroup_avc_mce_convert_to_sic_payload_intel = 5736,
    subgroup_avc_mce_convert_to_sic_result_intel = 5737,
    subgroup_avc_mce_get_motion_vectors_intel = 5738,
    subgroup_avc_mce_get_inter_distortions_intel = 5739,
    subgroup_avc_mce_get_best_inter_distortions_intel = 5740,
    subgroup_avc_mce_get_inter_major_shape_intel = 5741,
    subgroup_avc_mce_get_inter_minor_shape_intel = 5742,
    subgroup_avc_mce_get_inter_directions_intel = 5743,
    subgroup_avc_mce_get_inter_motion_vector_count_intel = 5744,
    subgroup_avc_mce_get_inter_reference_ids_intel = 5745,
    subgroup_avc_mce_get_inter_reference_interlaced_field_polarities_intel = 5746,
    subgroup_avc_ime_initialize_intel = 5747,
    subgroup_avc_ime_set_single_reference_intel = 5748,
    subgroup_avc_ime_set_dual_reference_intel = 5749,
    subgroup_avc_ime_ref_window_size_intel = 5750,
    subgroup_avc_ime_adjust_ref_offset_intel = 5751,
    subgroup_avc_ime_convert_to_mce_payload_intel = 5752,
    subgroup_avc_ime_set_max_motion_vector_count_intel = 5753,
    subgroup_avc_ime_set_unidirectional_mix_disable_intel = 5754,
    subgroup_avc_ime_set_early_search_termination_threshold_intel = 5755,
    subgroup_avc_ime_set_weighted_sad_intel = 5756,
    subgroup_avc_ime_evaluate_with_single_reference_intel = 5757,
    subgroup_avc_ime_evaluate_with_dual_reference_intel = 5758,
    subgroup_avc_ime_evaluate_with_single_reference_streamin_intel = 5759,
    subgroup_avc_ime_evaluate_with_dual_reference_streamin_intel = 5760,
    subgroup_avc_ime_evaluate_with_single_reference_streamout_intel = 5761,
    subgroup_avc_ime_evaluate_with_dual_reference_streamout_intel = 5762,
    subgroup_avc_ime_evaluate_with_single_reference_streaminout_intel = 5763,
    subgroup_avc_ime_evaluate_with_dual_reference_streaminout_intel = 5764,
    subgroup_avc_ime_convert_to_mce_result_intel = 5765,
    subgroup_avc_ime_get_single_reference_streamin_intel = 5766,
    subgroup_avc_ime_get_dual_reference_streamin_intel = 5767,
    subgroup_avc_ime_strip_single_reference_streamout_intel = 5768,
    subgroup_avc_ime_strip_dual_reference_streamout_intel = 5769,
    subgroup_avc_ime_get_streamout_single_reference_major_shape_motion_vectors_intel = 5770,
    subgroup_avc_ime_get_streamout_single_reference_major_shape_distortions_intel = 5771,
    subgroup_avc_ime_get_streamout_single_reference_major_shape_reference_ids_intel = 5772,
    subgroup_avc_ime_get_streamout_dual_reference_major_shape_motion_vectors_intel = 5773,
    subgroup_avc_ime_get_streamout_dual_reference_major_shape_distortions_intel = 5774,
    subgroup_avc_ime_get_streamout_dual_reference_major_shape_reference_ids_intel = 5775,
    subgroup_avc_ime_get_border_reached_intel = 5776,
    subgroup_avc_ime_get_truncated_search_indication_intel = 5777,
    subgroup_avc_ime_get_unidirectional_early_search_termination_intel = 5778,
    subgroup_avc_ime_get_weighting_pattern_minimum_motion_vector_intel = 5779,
    subgroup_avc_ime_get_weighting_pattern_minimum_distortion_intel = 5780,
    subgroup_avc_fme_initialize_intel = 5781,
    subgroup_avc_bme_initialize_intel = 5782,
    subgroup_avc_ref_convert_to_mce_payload_intel = 5783,
    subgroup_avc_ref_set_bidirectional_mix_disable_intel = 5784,
    subgroup_avc_ref_set_bilinear_filter_enable_intel = 5785,
    subgroup_avc_ref_evaluate_with_single_reference_intel = 5786,
    subgroup_avc_ref_evaluate_with_dual_reference_intel = 5787,
    subgroup_avc_ref_evaluate_with_multi_reference_intel = 5788,
    subgroup_avc_ref_evaluate_with_multi_reference_interlaced_intel = 5789,
    subgroup_avc_ref_convert_to_mce_result_intel = 5790,
    subgroup_avc_sic_initialize_intel = 5791,
    subgroup_avc_sic_configure_skc_intel = 5792,
    subgroup_avc_sic_configure_ipe_luma_intel = 5793,
    subgroup_avc_sic_configure_ipe_luma_chroma_intel = 5794,
    subgroup_avc_sic_get_motion_vector_mask_intel = 5795,
    subgroup_avc_sic_convert_to_mce_payload_intel = 5796,
    subgroup_avc_sic_set_intra_luma_shape_penalty_intel = 5797,
    subgroup_avc_sic_set_intra_luma_mode_cost_function_intel = 5798,
    subgroup_avc_sic_set_intra_chroma_mode_cost_function_intel = 5799,
    subgroup_avc_sic_set_bilinear_filter_enable_intel = 5800,
    subgroup_avc_sic_set_skc_forward_transform_enable_intel = 5801,
    subgroup_avc_sic_set_block_based_raw_skip_sad_intel = 5802,
    subgroup_avc_sic_evaluate_ipe_intel = 5803,
    subgroup_avc_sic_evaluate_with_single_reference_intel = 5804,
    subgroup_avc_sic_evaluate_with_dual_reference_intel = 5805,
    subgroup_avc_sic_evaluate_with_multi_reference_intel = 5806,
    subgroup_avc_sic_evaluate_with_multi_reference_interlaced_intel = 5807,
    subgroup_avc_sic_convert_to_mce_result_intel = 5808,
    subgroup_avc_sic_get_ipe_luma_shape_intel = 5809,
    subgroup_avc_sic_get_best_ipe_luma_distortion_intel = 5810,
    subgroup_avc_sic_get_best_ipe_chroma_distortion_intel = 5811,
    subgroup_avc_sic_get_packed_ipe_luma_modes_intel = 5812,
    subgroup_avc_sic_get_ipe_chroma_mode_intel = 5813,
    subgroup_avc_sic_get_packed_skc_luma_count_threshold_intel = 5814,
    subgroup_avc_sic_get_packed_skc_luma_sum_threshold_intel = 5815,
    subgroup_avc_sic_get_inter_raw_sads_intel = 5816,
    variable_length_array_intel = 5818,
    save_memory_intel = 5819,
    restore_memory_intel = 5820,
    arbitrary_float_sin_cos_pi_intel = 5840,
    arbitrary_float_cast_intel = 5841,
    arbitrary_float_cast_from_int_intel = 5842,
    arbitrary_float_cast_to_int_intel = 5843,
    arbitrary_float_add_intel = 5846,
    arbitrary_float_sub_intel = 5847,
    arbitrary_float_mul_intel = 5848,
    arbitrary_float_div_intel = 5849,
    arbitrary_float_gtintel = 5850,
    arbitrary_float_geintel = 5851,
    arbitrary_float_ltintel = 5852,
    arbitrary_float_leintel = 5853,
    arbitrary_float_eqintel = 5854,
    arbitrary_float_recip_intel = 5855,
    arbitrary_float_r_sqrt_intel = 5856,
    arbitrary_float_cbrt_intel = 5857,
    arbitrary_float_hypot_intel = 5858,
    arbitrary_float_sqrt_intel = 5859,
    arbitrary_float_log_intel = 5860,
    arbitrary_float_log2_intel = 5861,
    arbitrary_float_log10_intel = 5862,
    arbitrary_float_log1p_intel = 5863,
    arbitrary_float_exp_intel = 5864,
    arbitrary_float_exp2_intel = 5865,
    arbitrary_float_exp10_intel = 5866,
    arbitrary_float_expm1_intel = 5867,
    arbitrary_float_sin_intel = 5868,
    arbitrary_float_cos_intel = 5869,
    arbitrary_float_sin_cos_intel = 5870,
    arbitrary_float_sin_pi_intel = 5871,
    arbitrary_float_cos_pi_intel = 5872,
    arbitrary_float_a_sin_intel = 5873,
    arbitrary_float_a_sin_pi_intel = 5874,
    arbitrary_float_a_cos_intel = 5875,
    arbitrary_float_a_cos_pi_intel = 5876,
    arbitrary_float_a_tan_intel = 5877,
    arbitrary_float_a_tan_pi_intel = 5878,
    arbitrary_float_a_tan2_intel = 5879,
    arbitrary_float_pow_intel = 5880,
    arbitrary_float_pow_rintel = 5881,
    arbitrary_float_pow_nintel = 5882,
    loop_control_intel = 5887,
    alias_domain_decl_intel = 5911,
    alias_scope_decl_intel = 5912,
    alias_scope_list_decl_intel = 5913,
    fixed_sqrt_intel = 5923,
    fixed_recip_intel = 5924,
    fixed_rsqrt_intel = 5925,
    fixed_sin_intel = 5926,
    fixed_cos_intel = 5927,
    fixed_sin_cos_intel = 5928,
    fixed_sin_pi_intel = 5929,
    fixed_cos_pi_intel = 5930,
    fixed_sin_cos_pi_intel = 5931,
    fixed_log_intel = 5932,
    fixed_exp_intel = 5933,
    ptr_cast_to_cross_workgroup_intel = 5934,
    cross_workgroup_cast_to_ptr_intel = 5938,
    read_pipe_blocking_intel = 5946,
    write_pipe_blocking_intel = 5947,
    fpga_reg_intel = 5949,
    ray_query_get_ray_t_min_khr = 6016,
    ray_query_get_ray_flags_khr = 6017,
    ray_query_get_intersection_tkhr = 6018,
    ray_query_get_intersection_instance_custom_index_khr = 6019,
    ray_query_get_intersection_instance_id_khr = 6020,
    ray_query_get_intersection_instance_shader_binding_table_record_offset_khr = 6021,
    ray_query_get_intersection_geometry_index_khr = 6022,
    ray_query_get_intersection_primitive_index_khr = 6023,
    ray_query_get_intersection_barycentrics_khr = 6024,
    ray_query_get_intersection_front_face_khr = 6025,
    ray_query_get_intersection_candidate_aabb_opaque_khr = 6026,
    ray_query_get_intersection_object_ray_direction_khr = 6027,
    ray_query_get_intersection_object_ray_origin_khr = 6028,
    ray_query_get_world_ray_direction_khr = 6029,
    ray_query_get_world_ray_origin_khr = 6030,
    ray_query_get_intersection_object_to_world_khr = 6031,
    ray_query_get_intersection_world_to_object_khr = 6032,
    atomic_f_add_ext = 6035,
    type_buffer_surface_intel = 6086,
    type_struct_continued_intel = 6090,
    constant_composite_continued_intel = 6091,
    spec_constant_composite_continued_intel = 6092,
    convert_f_to_bf16intel = 6116,
    convert_bf16_to_fintel = 6117,
    control_barrier_arrive_intel = 6142,
    control_barrier_wait_intel = 6143,
    group_i_mul_khr = 6401,
    group_f_mul_khr = 6402,
    group_bitwise_and_khr = 6403,
    group_bitwise_or_khr = 6404,
    group_bitwise_xor_khr = 6405,
    group_logical_and_khr = 6406,
    group_logical_or_khr = 6407,
    group_logical_xor_khr = 6408,
    _,
};

pub const BuiltIn = enum(c_uint) {
    position = 0,
    point_size = 1,
    clip_distance = 3,
    cull_distance = 4,
    vertex_id = 5,
    instance_id = 6,
    primitive_id = 7,
    invocation_id = 8,
    layer = 9,
    viewport_index = 10,
    tess_level_outer = 11,
    tess_level_inner = 12,
    tess_coord = 13,
    patch_vertices = 14,
    frag_coord = 15,
    point_coord = 16,
    front_facing = 17,
    sample_id = 18,
    sample_position = 19,
    sample_mask = 20,
    frag_depth = 22,
    helper_invocation = 23,
    num_workgroups = 24,
    workgroup_size = 25,
    workgroup_id = 26,
    local_invocation_id = 27,
    global_invocation_id = 28,
    local_invocation_index = 29,
    work_dim = 30,
    global_size = 31,
    enqueued_workgroup_size = 32,
    global_offset = 33,
    global_linear_id = 34,
    subgroup_size = 36,
    subgroup_max_size = 37,
    num_subgroups = 38,
    num_enqueued_subgroups = 39,
    subgroup_id = 40,
    subgroup_local_invocation_id = 41,
    vertex_index = 42,
    instance_index = 43,
    core_idarm = 4160,
    core_count_arm = 4161,
    core_max_idarm = 4162,
    warp_idarm = 4163,
    warp_max_idarm = 4164,
    subgroup_eq_mask = 4416,
    subgroup_ge_mask = 4417,
    subgroup_gt_mask = 4418,
    subgroup_le_mask = 4419,
    subgroup_lt_mask = 4420,
    base_vertex = 4424,
    base_instance = 4425,
    draw_index = 4426,
    primitive_shading_rate_khr = 4432,
    device_index = 4438,
    view_index = 4440,
    shading_rate_khr = 4444,
    bary_coord_no_persp_amd = 4992,
    bary_coord_no_persp_centroid_amd = 4993,
    bary_coord_no_persp_sample_amd = 4994,
    bary_coord_smooth_amd = 4995,
    bary_coord_smooth_centroid_amd = 4996,
    bary_coord_smooth_sample_amd = 4997,
    bary_coord_pull_model_amd = 4998,
    frag_stencil_ref_ext = 5014,
    viewport_mask_nv = 5253,
    secondary_position_nv = 5257,
    secondary_viewport_mask_nv = 5258,
    position_per_view_nv = 5261,
    viewport_mask_per_view_nv = 5262,
    fully_covered_ext = 5264,
    task_count_nv = 5274,
    primitive_count_nv = 5275,
    primitive_indices_nv = 5276,
    clip_distance_per_view_nv = 5277,
    cull_distance_per_view_nv = 5278,
    layer_per_view_nv = 5279,
    mesh_view_count_nv = 5280,
    mesh_view_indices_nv = 5281,
    bary_coord_khr = 5286,
    bary_coord_no_persp_khr = 5287,
    frag_size_ext = 5292,
    frag_invocation_count_ext = 5293,
    primitive_point_indices_ext = 5294,
    primitive_line_indices_ext = 5295,
    primitive_triangle_indices_ext = 5296,
    cull_primitive_ext = 5299,
    launch_id_khr = 5319,
    launch_size_khr = 5320,
    world_ray_origin_khr = 5321,
    world_ray_direction_khr = 5322,
    object_ray_origin_khr = 5323,
    object_ray_direction_khr = 5324,
    ray_tmin_khr = 5325,
    ray_tmax_khr = 5326,
    instance_custom_index_khr = 5327,
    object_to_world_khr = 5330,
    world_to_object_khr = 5331,
    hit_tnv = 5332,
    hit_kind_khr = 5333,
    current_ray_time_nv = 5334,
    hit_triangle_vertex_positions_khr = 5335,
    incoming_ray_flags_khr = 5351,
    ray_geometry_index_khr = 5352,
    warps_per_smnv = 5374,
    sm_count_nv = 5375,
    warp_idnv = 5376,
    smidnv = 5377,
    cull_mask_khr = 6021,
    _,
};

pub const VariableFlags = packed struct(u32) {
    none: bool,
    unused: bool,
    physical_pointer_copy: bool,
    _padding: u29 = 0,
};

pub const Format = enum(c_uint) {
    spv_reflect_format_undefined = 0,
    spv_reflect_format_r16_uint = 74,
    spv_reflect_format_r16_sint = 75,
    spv_reflect_format_r16_sfloat = 76,
    spv_reflect_format_r16g16_uint = 81,
    spv_reflect_format_r16g16_sint = 82,
    spv_reflect_format_r16g16_sfloat = 83,
    spv_reflect_format_r16g16b16_uint = 88,
    spv_reflect_format_r16g16b16_sint = 89,
    spv_reflect_format_r16g16b16_sfloat = 90,
    spv_reflect_format_r16g16b16a16_uint = 95,
    spv_reflect_format_r16g16b16a16_sint = 96,
    spv_reflect_format_r16g16b16a16_sfloat = 97,
    spv_reflect_format_r32_uint = 98,
    spv_reflect_format_r32_sint = 99,
    spv_reflect_format_r32_sfloat = 100,
    spv_reflect_format_r32g32_uint = 101,
    spv_reflect_format_r32g32_sint = 102,
    spv_reflect_format_r32g32_sfloat = 103,
    spv_reflect_format_r32g32b32_uint = 104,
    spv_reflect_format_r32g32b32_sint = 105,
    spv_reflect_format_r32g32b32_sfloat = 106,
    spv_reflect_format_r32g32b32a32_uint = 107,
    spv_reflect_format_r32g32b32a32_sint = 108,
    spv_reflect_format_r32g32b32a32_sfloat = 109,
    spv_reflect_format_r64_uint = 110,
    spv_reflect_format_r64_sint = 111,
    spv_reflect_format_r64_sfloat = 112,
    spv_reflect_format_r64g64_uint = 113,
    spv_reflect_format_r64g64_sint = 114,
    spv_reflect_format_r64g64_sfloat = 115,
    spv_reflect_format_r64g64b64_uint = 116,
    spv_reflect_format_r64g64b64_sint = 117,
    spv_reflect_format_r64g64b64_sfloat = 118,
    spv_reflect_format_r64g64b64a64_uint = 119,
    spv_reflect_format_r64g64b64a64_sint = 120,
    spv_reflect_format_r64g64b64a64_sfloat = 121,
    _,
};

extern fn spvReflectGetShaderModule(size: usize, p_code: ?*const anyopaque, p_module: [*c]ShaderModule) c_uint;
extern fn spvReflectDestroyShaderModule(p_module: [*c]ShaderModule) void;
